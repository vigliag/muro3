// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.muro3 = window.muro3 || {};

  window.muro3.Game = (function() {
    function Game(canvas, stage) {
      var remainder;
      this.canvas = canvas;
      this.stage = stage;
      this.init = bind(this.init, this);
      this.addZombie = bind(this.addZombie, this);
      this.gameTick = bind(this.gameTick, this);
      this.keyToAction = bind(this.keyToAction, this);
      this.touchToAction = bind(this.touchToAction, this);
      this.drawScore = bind(this.drawScore, this);
      this.gameOver = bind(this.gameOver, this);
      this.scaleDisplay = bind(this.scaleDisplay, this);
      this.config = window.muro3.config;
      this.colWidth = Math.floor(this.config.width / 13);
      remainder = this.config.width % 13;
      this.leftMargin = Math.floor(remainder / 2);
      this.scaleInfo = {
        ratio: 1,
        currentWidth: this.config.width,
        currentHeight: this.config.height
      };
      this.ladderPositions = [2, 5, 7, 9];
      this.scoreDisplay = new createjs.Text("", "bold 17px Arial", "#000000");
      this.scoreDisplay.x = 20;
      this.scoreDisplay.y = 3;
      this.shoot = false;
      this.moveLeft = false;
      this.moveRight = false;
      createjs.Ticker.useRAF = true;
      createjs.Ticker.setFPS(this.config.fps);
    }

    Game.prototype.scaleDisplay = function() {
      this.scaleInfo.currentWidth = window.innerWidth;
      this.scaleInfo.currentHeight = this.scaleInfo.currentWidth * (this.config.height / this.config.width);
      if (this.scaleInfo.currentHeight > window.innerHeight) {
        this.scaleInfo.currentHeight = window.innerHeight;
        this.scaleInfo.currentWidth = this.scaleInfo.currentHeight * (this.config.width / this.config.height);
      }
      this.canvas.style.width = this.scaleInfo.currentWidth + 'px';
      return this.canvas.style.height = this.scaleInfo.currentHeight + 'px';
    };

    Game.prototype.getXPos = function(position) {
      return this.leftMargin + (position * this.colWidth);
    };

    Game.prototype.gameOver = function() {
      alert("Game Over. You scored " + this.score + " points");
      return this.init();
    };

    Game.prototype.drawScore = function() {
      return this.scoreDisplay.text = "Score: " + this.score;
    };

    Game.prototype.touchToAction = function(evt) {
      var middleX, middleY;
      middleX = this.scaleInfo.currentWidth / 2;
      middleY = this.scaleInfo.currentHeight / 2;
      if (evt.stageY > middleY) {
        this.moveLeft = false;
        this.moveRight = false;
        this.shoot = true;
      } else {
        if (evt.stageX > middleX) {
          this.shoot = false;
          this.moveLeft = false;
          this.moveRight = true;
        } else {
          this.shoot = false;
          this.moveRight = false;
          this.moveLeft = true;
        }
      }
      return false;
    };

    Game.prototype.keyToAction = function(e) {
      switch (e.keyCode) {
        case 37:
          this.moveLeft = true;
          this.moveRight = false;
          break;
        case 39:
          this.moveRight = true;
          this.moveLeft = false;
          break;
        case 40:
          this.shoot = true;
          break;
        case 32:
          this.shoot = true;
          break;
        case 80:
          createjs.Ticker.paused = !createjs.Ticker.paused;
      }
      return false;
    };

    Game.prototype.gameTick = function(evt) {
      var i, j, k, l, len, len1, len2, len3, len4, m, newStones, newZombies, nstone, ref, ref1, ref2, ref3, ref4, stone, zombie;
      if (evt.paused) {
        return;
      }
      if (this.player.position === 0 || this.player.position === 12) {
        this.player.charge();
        this.shoot = false;
      }
      if (this.moveRight && this.player.position < 12) {
        this.player.position += 1;
        this.moveRight = false;
      }
      if (this.moveLeft && this.player.position > 0) {
        this.player.position -= 1;
        this.moveLeft = false;
      }
      if (this.shoot && this.player.charged) {
        this.player.uncharge();
        nstone = new window.muro3.Stone(this.player.position, this.stage, this.assets);
        this.stones.push(nstone);
        nstone.drawing.x = this.getXPos(nstone.position) + 20;
        this.shoot = false;
      }
      if (Math.random() < 0.02) {
        this.addZombie(this.ladderPositions);
      }
      this.player.update();
      this.player.drawing.y = 34;
      this.player.drawing.x = this.getXPos(this.player.position);
      ref = this.zombies;
      for (i = 0, len = ref.length; i < len; i++) {
        zombie = ref[i];
        zombie.update();
        if (zombie.drawing.y < 100) {
          this.gameOver();
        }
      }
      ref1 = this.stones;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        stone = ref1[j];
        stone.update();
        if (stone.drawing.y > 600) {
          stone.toRemove = true;
        }
        ref2 = this.zombies;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          zombie = ref2[k];
          if (stone.position === zombie.position && (stone.drawing.y - zombie.drawing.y) > 0) {
            zombie.toRemove = true;
            stone.toRemove = true;
            this.score++;
          }
        }
      }
      newStones = [];
      ref3 = this.stones;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        stone = ref3[l];
        if (stone.toRemove) {
          this.stage.removeChild(stone.drawing);
        } else {
          newStones.push(stone);
        }
      }
      newZombies = [];
      ref4 = this.zombies;
      for (m = 0, len4 = ref4.length; m < len4; m++) {
        zombie = ref4[m];
        if (zombie.toRemove) {
          this.stage.removeChild(zombie.drawing);
        } else {
          newZombies.push(zombie);
        }
      }
      this.stones = newStones;
      this.zombies = newZombies;
      this.drawScore(this.score);
      return this.stage.update();
    };

    Game.prototype.addZombie = function() {
      var newzombie, position;
      position = this.ladderPositions[Math.floor(Math.random() * this.ladderPositions.length)];
      newzombie = new window.muro3.Zombie(position, this.stage, this.assets);
      newzombie.drawing.x = this.getXPos(position);
      return this.zombies.push(newzombie);
    };

    Game.prototype.init = function() {
      var addLadder, i, len, position, preventDefault, ref;
      this.assets = window.muro3.assets;
      console.dir(this.assets);
      this.stage.clear();
      this.zombies = [];
      this.stones = [];
      this.score = 0;
      this.stage.addChild(new createjs.Bitmap(this.assets.bg));
      this.stage.addChild(this.scoreDisplay);
      this.player = new window.muro3.Player(this.stage, this.assets);
      this.player.addToStage();
      addLadder = (function(_this) {
        return function(position) {
          var newLadder;
          newLadder = _this.stage.addChild(new createjs.Bitmap(_this.assets.ladder));
          newLadder.x = _this.getXPos(position);
          return newLadder.y = 110;
        };
      })(this);
      ref = this.ladderPositions;
      for (i = 0, len = ref.length; i < len; i++) {
        position = ref[i];
        addLadder(position);
      }
      document.onkeydown = this.keyToAction;
      preventDefault = (function(_this) {
        return function(e) {
          return e.preventDefault();
        };
      })(this);
      this.stage.on('stagemousedown', (function(_this) {
        return function(e) {
          return _this.touchToAction(e);
        };
      })(this));
      createjs.Ticker.removeAllEventListeners();
      return createjs.Ticker.addEventListener('tick', this.gameTick);
    };

    return Game;

  })();

}).call(this);
